{"version":3,"sources":["../../../../server/api/room/room.integration.js"],"names":[],"mappings":"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","file":"room.integration.js","sourcesContent":["'use strict';\n\nvar app = require('../..');\nimport request from 'supertest';\n\nvar newRoom;\n\ndescribe('Room API:', function() {\n\n  describe('GET /api/rooms', function() {\n    var rooms;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/rooms')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          rooms = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      expect(rooms).to.be.instanceOf(Array);\n    });\n\n  });\n\n  describe('POST /api/rooms', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('/api/rooms')\n        .send({\n          name: 'New Room',\n          info: 'This is the brand new room!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          newRoom = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created room', function() {\n      expect(newRoom.name).to.equal('New Room');\n      expect(newRoom.info).to.equal('This is the brand new room!!!');\n    });\n\n  });\n\n  describe('GET /api/rooms/:id', function() {\n    var room;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('/api/rooms/' + newRoom._id)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          room = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      room = {};\n    });\n\n    it('should respond with the requested room', function() {\n      expect(room.name).to.equal('New Room');\n      expect(room.info).to.equal('This is the brand new room!!!');\n    });\n\n  });\n\n  describe('PUT /api/rooms/:id', function() {\n    var updatedRoom;\n\n    beforeEach(function(done) {\n      request(app)\n        .put('/api/rooms/' + newRoom._id)\n        .send({\n          name: 'Updated Room',\n          info: 'This is the updated room!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if (err) {\n            return done(err);\n          }\n          updatedRoom = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updatedRoom = {};\n    });\n\n    it('should respond with the updated room', function() {\n      expect(updatedRoom.name).to.equal('Updated Room');\n      expect(updatedRoom.info).to.equal('This is the updated room!!!');\n    });\n\n  });\n\n  describe('DELETE /api/rooms/:id', function() {\n\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete('/api/rooms/' + newRoom._id)\n        .expect(204)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when room does not exist', function(done) {\n      request(app)\n        .delete('/api/rooms/' + newRoom._id)\n        .expect(404)\n        .end((err, res) => {\n          if (err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n  });\n\n});\n"]}